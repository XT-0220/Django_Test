基本查询
# 1.查询指定记录
	模型类.objects.get()
# 2.查询所有记录
	模型类.objects.all()
# 3.查询满足条件记录个数
	模型类.objects.filter().count()

# 基本条件、过滤查询
模型类.objects.filter(属性名称__比较运算符=值)

# 1.查询书名为'天龙八部'的书籍 (相等)
    BookInfo.objects.filter(btitle__exact='天龙八部')
    # 可简写为：
    BookInfo.objects.filter(btitle='天龙八部')

########################################################

# 2.查询书名包含'湖'的书籍 (模糊查询)
    BookInfo.objects.filter(btitle__contains='湖')

########################################################

# 3.查询书名以'部'结尾的书籍 (模糊查询) (endswith、startswith)
    BookInfo.objects.filter(btitle__endswith='部')

########################################################

# 4.查询书名不为空的书籍 (空查询)
    BookInfo.objects.filter(btitle__isnull=False)

########################################################

# 5.查询编号为1或3或5的书籍 (范围查询)
    BookInfo.objects.filter(id__in=[1, 3, 5])

########################################################

# 6.查询编号大于3的书籍 (比较查询)
    # gt 大于 (greater then)
    # gte 大于等于 (greater then equal)
    # lt 小于 (less then)
    # lte 小于等于 (less then equal)
    BookInfo.objects.filter(id__gt=3)

########################################################

# 7.查询id不等于3的书籍 (不相等)
    BookInfo.objects.exclude(id=3)

########################################################

# 8.查询1980年发表的书籍
    # year、month、day、week_day、hour、minute、second：对日期时间类型的属性进行运算
    BookInfo.objects.filter(bpub_date__year=1980)

########################################################

# 9.查询1990年1月1日后发表的书籍
    BookInfo.objects.filter(bpub_date__gt='1990-1-1')

########################################################

# F对象
# 1.查询阅读量大于评论量的书籍
    BookInfo.objects.filter(bread__gte=F('bcomment'))

########################################################

# 2.查询阅读量大于2倍评论量的书籍
    BookInfo.objects.filter(bread__gt=F('bcomment') * 2)

########################################################

# Q对象 (逻辑非)
# 1.查询阅读量大于20，或编号小于3的图书
    BookInfo.objects.filter(Q(bread__gt=20) | Q(pk__lt=3))

########################################################

# 聚合函数
# 1.统计总的阅读量
    # Avg 平均，Count 数量，Max 最大，Min 最小，Sum 求和
	BookInfo.objects.aggregate(Sum('bread'))

########################################################

# 关联查询 (最重要)
# 1.一查多：查询编号为1的图书中所有人物信息
	book = BookInfo.objects.get(id=1)
	book.heroinfo_set.all()

	# 一查多语法：一方模型对象.多方模型类名小写_set

########################################################

# 2.多查一：查询编号为1的英雄出自的书籍
	hero = HeroInfo.objects.get(id=1)
	hero.hbook

	# 多查一语法：多方模型对象.外键属性名

########################################################